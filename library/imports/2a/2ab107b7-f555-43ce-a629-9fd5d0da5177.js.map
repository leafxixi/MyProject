{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\Gesture/assets\\Script\\Gesture\\gestureTool.js"],"names":["DollarRecognizer","require","gesture","cc","Class","extends","Component","properties","setEventControl","self","_isDown","graphics","getComponent","Graphics","eventManager","addListener","event","EventListener","TOUCH_ONE_BY_ONE","swallowTouches","onTouchBegan","touch","target","getCurrentTarget","locationInNode","convertToNodeSpace","getLocation","len","InitPoint","x","y","moveTo","clear","circle","onTouchMoved","AddPoint","lineTo","stroke","onTouchEnded","GetPoints","length","result","Recognize","log","Name","node","onLoad","update","dt"],"mappings":";;;;;;AAAA,IAAIA,mBAAmBC,QAAQ,aAAR,CAAvB;AACA,IAAIC,UAAU,IAAIF,gBAAJ,EAAd;;AAIAG,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY,EAHP;;AASL;AACAC,qBAAiB,2BAAU;AACvB,YAAIC,OAAO,IAAX;AACA,YAAIC,UAAU,KAAd;;AAEA,YAAIC,WAAW,KAAKC,YAAL,CAAkBT,GAAGU,QAArB,CAAf;;AAEA;;AAEAV,WAAGW,YAAH,CAAgBC,WAAhB,CAA4B;AAC5BC,mBAAOb,GAAGc,aAAH,CAAiBC,gBADI;AAExBC,4BAAgB,IAFQ;AAGtB;AACFC,0BAAc,sBAAUC,KAAV,EAAiBL,KAAjB,EAAwB;AAClC;AACA,oBAAIM,SAASN,MAAMO,gBAAN,EAAb;AACA;AACA,oBAAIC,iBAAiBF,OAAOG,kBAAP,CAA0BJ,MAAMK,WAAN,EAA1B,CAArB;AACAhB,0BAAU,IAAV;;AAEA,oBAAIiB,MAAMzB,QAAQ0B,SAAR,CAAkBJ,eAAeK,CAAjC,EAAmCL,eAAeM,CAAlD,CAAV;AACA;AACAnB,yBAASoB,MAAT,CAAgB,CAAhB,EAAmB,CAAnB;AACApB,yBAASqB,KAAT;AACArB,yBAASsB,MAAT,CAAgBT,eAAeK,CAA/B,EAAkCL,eAAeM,CAAjD,EAAoD,CAApD;AACAnB,yBAASoB,MAAT,CAAgBP,eAAeK,CAA/B,EAAkCL,eAAeM,CAAjD;AACA,uBAAO,IAAP;AACH,aAlBuB;AAmBxBI,0BAAc,sBAAUb,KAAV,EAAiBL,KAAjB,EAAwB;AAAa;AAC/C;AACA,oBAAIM,SAASN,MAAMO,gBAAN,EAAb;AACA;AACA,oBAAIC,iBAAiBF,OAAOG,kBAAP,CAA0BJ,MAAMK,WAAN,EAA1B,CAArB;AACA,oBAAIhB,OAAJ,EACA;AACCR,4BAAQiC,QAAR,CAAiBX,eAAeK,CAAhC,EAAkCL,eAAeM,CAAjD;AACAnB,6BAASyB,MAAT,CAAgBZ,eAAeK,CAA/B,EAAkCL,eAAeM,CAAjD;AACGnB,6BAAS0B,MAAT;AACA;AACH;AAEJ,aAhCuB;AAiCxBC,0BAAc,sBAAUjB,KAAV,EAAiBL,KAAjB,EAAwB;AAAa;;AAE/C,oBAAIN,OAAJ,EACA;AACIA,8BAAU,KAAV;AACA,wBAAIR,QAAQqC,SAAR,GAAoBC,MAApB,IAA8B,CAAlC,EACA;AACI;;AAEA;AACH,4BAAIC,SAASvC,QAAQwC,SAAR,CAAkBxC,QAAQqC,SAAR,EAAlB,EAAuC,CAAvC,CAAb;AACA;AACGpC,2BAAGwC,GAAH,CAAO,aAAaF,OAAOG,IAA3B;AAEH,qBATD,MAUK;AACL;AACC;AACG;AACAzC,+BAAGwC,GAAH,CAAO,aAAP;AACH;AACJ;AACJ;;AAvDuB,SAA5B,EAyDGlC,KAAKoC,IAzDR;AA0DH,KA5EI;AA6EL;AACAC,YAAQ,kBAAY;;AAEhB;AACA,aAAKtC,eAAL;AACH,KAlFI;;AAoFL;AACAuC,YAAQ,gBAAUC,EAAV,EAAc,CAErB;AAvFI,CAAT","file":"gestureTool.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Gesture","sourcesContent":["var DollarRecognizer = require(\"gestureHelp\");\r\nvar gesture = new DollarRecognizer();\r\n\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n\r\n    },\r\n\r\n\r\n    //事件监听\r\n    setEventControl: function(){\r\n        var self = this;\r\n        var _isDown = false;\r\n\r\n        var graphics = this.getComponent(cc.Graphics);\r\n\r\n        // var str = \"\";\r\n\r\n        cc.eventManager.addListener({\r\n        event: cc.EventListener.TOUCH_ONE_BY_ONE,\r\n            swallowTouches: true,\r\n              // 设置是否吞没事件，在 onTouchBegan 方法返回 true 时吞没\r\n            onTouchBegan: function (touch, event) {\r\n                //实现 onTouchBegan 事件回调函数\r\n                var target = event.getCurrentTarget();\r\n                // 获取事件所绑定的 target\r\n                var locationInNode = target.convertToNodeSpace(touch.getLocation());\r\n                _isDown = true;\r\n\r\n                var len = gesture.InitPoint(locationInNode.x,locationInNode.y);\r\n                // str = \"this.Unistrokes[] = new Unistroke(\"+\", new Array(new Point(\"+parseInt(locationInNode.x)+\",\"+parseInt(locationInNode.y)+\")\";\r\n                graphics.moveTo(0, 0);\r\n                graphics.clear();\r\n                graphics.circle(locationInNode.x, locationInNode.y, 2);\r\n                graphics.moveTo(locationInNode.x, locationInNode.y);\r\n                return true;\r\n            },\r\n            onTouchMoved: function (touch, event) {            // 触摸移动时触发\r\n                //实现 onTouchBegan 事件回调函数\r\n                var target = event.getCurrentTarget();\r\n                // 获取事件所绑定的 target\r\n                var locationInNode = target.convertToNodeSpace(touch.getLocation());\r\n                if (_isDown)\r\n                {\r\n                \tgesture.AddPoint(locationInNode.x,locationInNode.y);\r\n                \tgraphics.lineTo(locationInNode.x, locationInNode.y);\r\n                    graphics.stroke();\r\n                    // str += \",new Point(\"+parseInt(locationInNode.x)+\",\"+parseInt(locationInNode.y)+\")\";\r\n                }\r\n\r\n            },\r\n            onTouchEnded: function (touch, event) {            // 点击事件结束处理\r\n\r\n                if (_isDown)\r\n                {\r\n                    _isDown = false;\r\n                    if (gesture.GetPoints().length >= 7)\r\n                    {\r\n                        // str += \"));\";\r\n\r\n                        // cc.log(\"集合: \" + str);\r\n                    \tvar result = gesture.Recognize(gesture.GetPoints(), 0);\r\n                    \t//判定手势操作\r\n                        cc.log(\"Result: \" + result.Name);\r\n                        \r\n                    }\r\n                    else // fewer than 7 points were inputted\r\n                    {\r\n                    \t//当无法Recognize时，判定为点击操作\r\n                        // cc.log(\"Too few points made. Please try again.\");\r\n                        cc.log(\"Result: Tap\");\r\n                    }\r\n                }\r\n            }\r\n\r\n        }, self.node)\r\n    },\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n        //触摸监听\r\n        this.setEventControl();\r\n    },\r\n\r\n    // called every frame\r\n    update: function (dt) {\r\n\r\n    },\r\n});\r\n"]}